// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product_catalog.proto

package product_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProductInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductInfoMultiError, or
// nil if none found.
func (m *ProductInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Description

	// no validation rules for Price

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductInfoValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductInfoValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductInfoValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetBrand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductInfoValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductInfoValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBrand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductInfoValidationError{
				field:  "Brand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductInfoMultiError(errors)
	}

	return nil
}

// ProductInfoMultiError is an error wrapping multiple validation errors
// returned by ProductInfo.ValidateAll() if the designated constraints aren't met.
type ProductInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductInfoMultiError) AllErrors() []error { return m }

// ProductInfoValidationError is the validation error returned by
// ProductInfo.Validate if the designated constraints aren't met.
type ProductInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductInfoValidationError) ErrorName() string { return "ProductInfoValidationError" }

// Error satisfies the builtin error interface
func (e ProductInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductInfoValidationError{}

// Validate checks the field values on CreateProductInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateProductInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductInfoMultiError, or nil if none found.
func (m *CreateProductInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Description

	// no validation rules for Price

	// no validation rules for BrandId

	if len(errors) > 0 {
		return CreateProductInfoMultiError(errors)
	}

	return nil
}

// CreateProductInfoMultiError is an error wrapping multiple validation errors
// returned by CreateProductInfo.ValidateAll() if the designated constraints
// aren't met.
type CreateProductInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductInfoMultiError) AllErrors() []error { return m }

// CreateProductInfoValidationError is the validation error returned by
// CreateProductInfo.Validate if the designated constraints aren't met.
type CreateProductInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductInfoValidationError) ErrorName() string {
	return "CreateProductInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductInfoValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRequestMultiError, or nil if none found.
func (m *CreateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductRequestMultiError(errors)
	}

	return nil
}

// CreateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRequestMultiError) AllErrors() []error { return m }

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductResponseMultiError, or nil if none found.
func (m *CreateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProductResponseMultiError(errors)
	}

	return nil
}

// CreateProductResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductResponseMultiError) AllErrors() []error { return m }

// CreateProductResponseValidationError is the validation error returned by
// CreateProductResponse.Validate if the designated constraints aren't met.
type CreateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductResponseValidationError) ErrorName() string {
	return "CreateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductResponseValidationError{}

// Validate checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductRequestMultiError, or nil if none found.
func (m *UpdateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductRequestMultiError(errors)
	}

	return nil
}

// UpdateProductRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductRequestMultiError) AllErrors() []error { return m }

// UpdateProductRequestValidationError is the validation error returned by
// UpdateProductRequest.Validate if the designated constraints aren't met.
type UpdateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductRequestValidationError) ErrorName() string {
	return "UpdateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductRequestValidationError{}

// Validate checks the field values on GetProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductByIdRequestMultiError, or nil if none found.
func (m *GetProductByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProductByIdRequestMultiError(errors)
	}

	return nil
}

// GetProductByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductByIdRequestMultiError) AllErrors() []error { return m }

// GetProductByIdRequestValidationError is the validation error returned by
// GetProductByIdRequest.Validate if the designated constraints aren't met.
type GetProductByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductByIdRequestValidationError) ErrorName() string {
	return "GetProductByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductByIdRequestValidationError{}

// Validate checks the field values on GetProductByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductByIdResponseMultiError, or nil if none found.
func (m *GetProductByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductByIdResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductByIdResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductByIdResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductByIdResponseMultiError(errors)
	}

	return nil
}

// GetProductByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductByIdResponseMultiError) AllErrors() []error { return m }

// GetProductByIdResponseValidationError is the validation error returned by
// GetProductByIdResponse.Validate if the designated constraints aren't met.
type GetProductByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductByIdResponseValidationError) ErrorName() string {
	return "GetProductByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductByIdResponseValidationError{}

// Validate checks the field values on GetProductBySlugRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductBySlugRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductBySlugRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductBySlugRequestMultiError, or nil if none found.
func (m *GetProductBySlugRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductBySlugRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	if len(errors) > 0 {
		return GetProductBySlugRequestMultiError(errors)
	}

	return nil
}

// GetProductBySlugRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductBySlugRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductBySlugRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductBySlugRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductBySlugRequestMultiError) AllErrors() []error { return m }

// GetProductBySlugRequestValidationError is the validation error returned by
// GetProductBySlugRequest.Validate if the designated constraints aren't met.
type GetProductBySlugRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductBySlugRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductBySlugRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductBySlugRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductBySlugRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductBySlugRequestValidationError) ErrorName() string {
	return "GetProductBySlugRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductBySlugRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductBySlugRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductBySlugRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductBySlugRequestValidationError{}

// Validate checks the field values on GetProductBySlugResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductBySlugResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductBySlugResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductBySlugResponseMultiError, or nil if none found.
func (m *GetProductBySlugResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductBySlugResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductBySlugResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductBySlugResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductBySlugResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductBySlugResponseMultiError(errors)
	}

	return nil
}

// GetProductBySlugResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductBySlugResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductBySlugResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductBySlugResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductBySlugResponseMultiError) AllErrors() []error { return m }

// GetProductBySlugResponseValidationError is the validation error returned by
// GetProductBySlugResponse.Validate if the designated constraints aren't met.
type GetProductBySlugResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductBySlugResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductBySlugResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductBySlugResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductBySlugResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductBySlugResponseValidationError) ErrorName() string {
	return "GetProductBySlugResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductBySlugResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductBySlugResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductBySlugResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductBySlugResponseValidationError{}

// Validate checks the field values on GetAllProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllProductsRequestMultiError, or nil if none found.
func (m *GetAllProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllProductsRequestMultiError(errors)
	}

	return nil
}

// GetAllProductsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllProductsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllProductsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllProductsRequestMultiError) AllErrors() []error { return m }

// GetAllProductsRequestValidationError is the validation error returned by
// GetAllProductsRequest.Validate if the designated constraints aren't met.
type GetAllProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllProductsRequestValidationError) ErrorName() string {
	return "GetAllProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllProductsRequestValidationError{}

// Validate checks the field values on GetAllProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllProductsResponseMultiError, or nil if none found.
func (m *GetAllProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProduct() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllProductsResponseValidationError{
						field:  fmt.Sprintf("Product[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllProductsResponseValidationError{
						field:  fmt.Sprintf("Product[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllProductsResponseValidationError{
					field:  fmt.Sprintf("Product[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllProductsResponseMultiError(errors)
	}

	return nil
}

// GetAllProductsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllProductsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllProductsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllProductsResponseMultiError) AllErrors() []error { return m }

// GetAllProductsResponseValidationError is the validation error returned by
// GetAllProductsResponse.Validate if the designated constraints aren't met.
type GetAllProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllProductsResponseValidationError) ErrorName() string {
	return "GetAllProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllProductsResponseValidationError{}

// Validate checks the field values on DeleteProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIdRequestMultiError, or nil if none found.
func (m *DeleteProductByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProductByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteProductByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProductByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIdRequestMultiError) AllErrors() []error { return m }

// DeleteProductByIdRequestValidationError is the validation error returned by
// DeleteProductByIdRequest.Validate if the designated constraints aren't met.
type DeleteProductByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIdRequestValidationError) ErrorName() string {
	return "DeleteProductByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIdRequestValidationError{}

// Validate checks the field values on DeleteProductByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIdResponseMultiError, or nil if none found.
func (m *DeleteProductByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteProductByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteProductByIdResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProductByIdResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteProductByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIdResponseMultiError) AllErrors() []error { return m }

// DeleteProductByIdResponseValidationError is the validation error returned by
// DeleteProductByIdResponse.Validate if the designated constraints aren't met.
type DeleteProductByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIdResponseValidationError) ErrorName() string {
	return "DeleteProductByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIdResponseValidationError{}

// Validate checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryRequestMultiError, or nil if none found.
func (m *CreateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCategoryRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCategoryRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCategoryRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCategoryRequestValidationError is the validation error returned by
// CreateCategoryRequest.Validate if the designated constraints aren't met.
type CreateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryRequestValidationError) ErrorName() string {
	return "CreateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryRequestValidationError{}

// Validate checks the field values on CreateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryResponseMultiError, or nil if none found.
func (m *CreateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCategoryResponseMultiError(errors)
	}

	return nil
}

// CreateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryResponseMultiError) AllErrors() []error { return m }

// CreateCategoryResponseValidationError is the validation error returned by
// CreateCategoryResponse.Validate if the designated constraints aren't met.
type CreateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryResponseValidationError) ErrorName() string {
	return "CreateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryResponseValidationError{}

// Validate checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryRequestMultiError, or nil if none found.
func (m *UpdateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCategoryRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCategoryRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCategoryRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateCategoryRequestValidationError is the validation error returned by
// UpdateCategoryRequest.Validate if the designated constraints aren't met.
type UpdateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryRequestValidationError) ErrorName() string {
	return "UpdateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryRequestValidationError{}

// Validate checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryResponseMultiError, or nil if none found.
func (m *UpdateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateCategoryResponseMultiError(errors)
	}

	return nil
}

// UpdateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryResponseMultiError) AllErrors() []error { return m }

// UpdateCategoryResponseValidationError is the validation error returned by
// UpdateCategoryResponse.Validate if the designated constraints aren't met.
type UpdateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryResponseValidationError) ErrorName() string {
	return "UpdateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryResponseValidationError{}

// Validate checks the field values on GetAllCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllCategoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllCategoriesRequestMultiError, or nil if none found.
func (m *GetAllCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllCategoriesRequestMultiError(errors)
	}

	return nil
}

// GetAllCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCategoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCategoriesRequestMultiError) AllErrors() []error { return m }

// GetAllCategoriesRequestValidationError is the validation error returned by
// GetAllCategoriesRequest.Validate if the designated constraints aren't met.
type GetAllCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCategoriesRequestValidationError) ErrorName() string {
	return "GetAllCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCategoriesRequestValidationError{}

// Validate checks the field values on GetAllCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllCategoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllCategoriesResponseMultiError, or nil if none found.
func (m *GetAllCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllCategoriesResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllCategoriesResponseMultiError(errors)
	}

	return nil
}

// GetAllCategoriesResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllCategoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCategoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCategoriesResponseMultiError) AllErrors() []error { return m }

// GetAllCategoriesResponseValidationError is the validation error returned by
// GetAllCategoriesResponse.Validate if the designated constraints aren't met.
type GetAllCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCategoriesResponseValidationError) ErrorName() string {
	return "GetAllCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCategoriesResponseValidationError{}

// Validate checks the field values on GetCategoryByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryByIdRequestMultiError, or nil if none found.
func (m *GetCategoryByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCategoryByIdRequestMultiError(errors)
	}

	return nil
}

// GetCategoryByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetCategoryByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryByIdRequestMultiError) AllErrors() []error { return m }

// GetCategoryByIdRequestValidationError is the validation error returned by
// GetCategoryByIdRequest.Validate if the designated constraints aren't met.
type GetCategoryByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryByIdRequestValidationError) ErrorName() string {
	return "GetCategoryByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryByIdRequestValidationError{}

// Validate checks the field values on GetCategoryByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryByIdResponseMultiError, or nil if none found.
func (m *GetCategoryByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryByIdResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryByIdResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryByIdResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCategoryByIdResponseMultiError(errors)
	}

	return nil
}

// GetCategoryByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetCategoryByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryByIdResponseMultiError) AllErrors() []error { return m }

// GetCategoryByIdResponseValidationError is the validation error returned by
// GetCategoryByIdResponse.Validate if the designated constraints aren't met.
type GetCategoryByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryByIdResponseValidationError) ErrorName() string {
	return "GetCategoryByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryByIdResponseValidationError{}

// Validate checks the field values on GetCategoryBySlugRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryBySlugRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryBySlugRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryBySlugRequestMultiError, or nil if none found.
func (m *GetCategoryBySlugRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryBySlugRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	if len(errors) > 0 {
		return GetCategoryBySlugRequestMultiError(errors)
	}

	return nil
}

// GetCategoryBySlugRequestMultiError is an error wrapping multiple validation
// errors returned by GetCategoryBySlugRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryBySlugRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryBySlugRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryBySlugRequestMultiError) AllErrors() []error { return m }

// GetCategoryBySlugRequestValidationError is the validation error returned by
// GetCategoryBySlugRequest.Validate if the designated constraints aren't met.
type GetCategoryBySlugRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryBySlugRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryBySlugRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryBySlugRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryBySlugRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryBySlugRequestValidationError) ErrorName() string {
	return "GetCategoryBySlugRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryBySlugRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryBySlugRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryBySlugRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryBySlugRequestValidationError{}

// Validate checks the field values on GetCategoryBySlugResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryBySlugResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryBySlugResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryBySlugResponseMultiError, or nil if none found.
func (m *GetCategoryBySlugResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryBySlugResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryBySlugResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryBySlugResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryBySlugResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCategoryBySlugResponseMultiError(errors)
	}

	return nil
}

// GetCategoryBySlugResponseMultiError is an error wrapping multiple validation
// errors returned by GetCategoryBySlugResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCategoryBySlugResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryBySlugResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryBySlugResponseMultiError) AllErrors() []error { return m }

// GetCategoryBySlugResponseValidationError is the validation error returned by
// GetCategoryBySlugResponse.Validate if the designated constraints aren't met.
type GetCategoryBySlugResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryBySlugResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryBySlugResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryBySlugResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryBySlugResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryBySlugResponseValidationError) ErrorName() string {
	return "GetCategoryBySlugResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryBySlugResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryBySlugResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryBySlugResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryBySlugResponseValidationError{}

// Validate checks the field values on DeleteCategoryByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryByIdRequestMultiError, or nil if none found.
func (m *DeleteCategoryByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCategoryByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteCategoryByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteCategoryByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryByIdRequestMultiError) AllErrors() []error { return m }

// DeleteCategoryByIdRequestValidationError is the validation error returned by
// DeleteCategoryByIdRequest.Validate if the designated constraints aren't met.
type DeleteCategoryByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryByIdRequestValidationError) ErrorName() string {
	return "DeleteCategoryByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryByIdRequestValidationError{}

// Validate checks the field values on DeleteCategoryByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryByIdResponseMultiError, or nil if none found.
func (m *DeleteCategoryByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteCategoryByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteCategoryByIdResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCategoryByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteCategoryByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryByIdResponseMultiError) AllErrors() []error { return m }

// DeleteCategoryByIdResponseValidationError is the validation error returned
// by DeleteCategoryByIdResponse.Validate if the designated constraints aren't met.
type DeleteCategoryByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryByIdResponseValidationError) ErrorName() string {
	return "DeleteCategoryByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryByIdResponseValidationError{}

// Validate checks the field values on BrandInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BrandInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BrandInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BrandInfoMultiError, or nil
// if none found.
func (m *BrandInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BrandInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Description

	if len(errors) > 0 {
		return BrandInfoMultiError(errors)
	}

	return nil
}

// BrandInfoMultiError is an error wrapping multiple validation errors returned
// by BrandInfo.ValidateAll() if the designated constraints aren't met.
type BrandInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrandInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrandInfoMultiError) AllErrors() []error { return m }

// BrandInfoValidationError is the validation error returned by
// BrandInfo.Validate if the designated constraints aren't met.
type BrandInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandInfoValidationError) ErrorName() string { return "BrandInfoValidationError" }

// Error satisfies the builtin error interface
func (e BrandInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrandInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandInfoValidationError{}

// Validate checks the field values on CreateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBrandRequestMultiError, or nil if none found.
func (m *CreateBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBrandRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBrandRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBrandRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBrandRequestMultiError(errors)
	}

	return nil
}

// CreateBrandRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBrandRequestMultiError) AllErrors() []error { return m }

// CreateBrandRequestValidationError is the validation error returned by
// CreateBrandRequest.Validate if the designated constraints aren't met.
type CreateBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBrandRequestValidationError) ErrorName() string {
	return "CreateBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBrandRequestValidationError{}

// Validate checks the field values on CreateBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBrandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBrandResponseMultiError, or nil if none found.
func (m *CreateBrandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBrandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateBrandResponseMultiError(errors)
	}

	return nil
}

// CreateBrandResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBrandResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBrandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBrandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBrandResponseMultiError) AllErrors() []error { return m }

// CreateBrandResponseValidationError is the validation error returned by
// CreateBrandResponse.Validate if the designated constraints aren't met.
type CreateBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBrandResponseValidationError) ErrorName() string {
	return "CreateBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBrandResponseValidationError{}

// Validate checks the field values on UpdateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBrandRequestMultiError, or nil if none found.
func (m *UpdateBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBrandRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBrandRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBrandRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBrandRequestMultiError(errors)
	}

	return nil
}

// UpdateBrandRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBrandRequestMultiError) AllErrors() []error { return m }

// UpdateBrandRequestValidationError is the validation error returned by
// UpdateBrandRequest.Validate if the designated constraints aren't met.
type UpdateBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBrandRequestValidationError) ErrorName() string {
	return "UpdateBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBrandRequestValidationError{}

// Validate checks the field values on UpdateBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBrandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBrandResponseMultiError, or nil if none found.
func (m *UpdateBrandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBrandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateBrandResponseMultiError(errors)
	}

	return nil
}

// UpdateBrandResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateBrandResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBrandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBrandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBrandResponseMultiError) AllErrors() []error { return m }

// UpdateBrandResponseValidationError is the validation error returned by
// UpdateBrandResponse.Validate if the designated constraints aren't met.
type UpdateBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBrandResponseValidationError) ErrorName() string {
	return "UpdateBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBrandResponseValidationError{}

// Validate checks the field values on GetAllBrandsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllBrandsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllBrandsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllBrandsRequestMultiError, or nil if none found.
func (m *GetAllBrandsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllBrandsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllBrandsRequestMultiError(errors)
	}

	return nil
}

// GetAllBrandsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllBrandsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllBrandsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllBrandsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllBrandsRequestMultiError) AllErrors() []error { return m }

// GetAllBrandsRequestValidationError is the validation error returned by
// GetAllBrandsRequest.Validate if the designated constraints aren't met.
type GetAllBrandsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllBrandsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllBrandsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllBrandsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllBrandsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllBrandsRequestValidationError) ErrorName() string {
	return "GetAllBrandsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllBrandsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllBrandsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllBrandsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllBrandsRequestValidationError{}

// Validate checks the field values on GetAllBrandsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllBrandsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllBrandsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllBrandsResponseMultiError, or nil if none found.
func (m *GetAllBrandsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllBrandsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBrands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllBrandsResponseValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllBrandsResponseValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllBrandsResponseValidationError{
					field:  fmt.Sprintf("Brands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllBrandsResponseMultiError(errors)
	}

	return nil
}

// GetAllBrandsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllBrandsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllBrandsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllBrandsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllBrandsResponseMultiError) AllErrors() []error { return m }

// GetAllBrandsResponseValidationError is the validation error returned by
// GetAllBrandsResponse.Validate if the designated constraints aren't met.
type GetAllBrandsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllBrandsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllBrandsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllBrandsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllBrandsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllBrandsResponseValidationError) ErrorName() string {
	return "GetAllBrandsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllBrandsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllBrandsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllBrandsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllBrandsResponseValidationError{}

// Validate checks the field values on GetBrandByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBrandByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrandByIdRequestMultiError, or nil if none found.
func (m *GetBrandByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBrandByIdRequestMultiError(errors)
	}

	return nil
}

// GetBrandByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetBrandByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBrandByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandByIdRequestMultiError) AllErrors() []error { return m }

// GetBrandByIdRequestValidationError is the validation error returned by
// GetBrandByIdRequest.Validate if the designated constraints aren't met.
type GetBrandByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandByIdRequestValidationError) ErrorName() string {
	return "GetBrandByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBrandByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandByIdRequestValidationError{}

// Validate checks the field values on GetBrandByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBrandByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrandByIdResponseMultiError, or nil if none found.
func (m *GetBrandByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBrand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBrandByIdResponseValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBrandByIdResponseValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBrand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBrandByIdResponseValidationError{
				field:  "Brand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBrandByIdResponseMultiError(errors)
	}

	return nil
}

// GetBrandByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetBrandByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBrandByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandByIdResponseMultiError) AllErrors() []error { return m }

// GetBrandByIdResponseValidationError is the validation error returned by
// GetBrandByIdResponse.Validate if the designated constraints aren't met.
type GetBrandByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandByIdResponseValidationError) ErrorName() string {
	return "GetBrandByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBrandByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandByIdResponseValidationError{}

// Validate checks the field values on GetBrandBySlugRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBrandBySlugRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandBySlugRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrandBySlugRequestMultiError, or nil if none found.
func (m *GetBrandBySlugRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandBySlugRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	if len(errors) > 0 {
		return GetBrandBySlugRequestMultiError(errors)
	}

	return nil
}

// GetBrandBySlugRequestMultiError is an error wrapping multiple validation
// errors returned by GetBrandBySlugRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBrandBySlugRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandBySlugRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandBySlugRequestMultiError) AllErrors() []error { return m }

// GetBrandBySlugRequestValidationError is the validation error returned by
// GetBrandBySlugRequest.Validate if the designated constraints aren't met.
type GetBrandBySlugRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandBySlugRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandBySlugRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandBySlugRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandBySlugRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandBySlugRequestValidationError) ErrorName() string {
	return "GetBrandBySlugRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBrandBySlugRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandBySlugRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandBySlugRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandBySlugRequestValidationError{}

// Validate checks the field values on GetBrandBySlugResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBrandBySlugResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandBySlugResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrandBySlugResponseMultiError, or nil if none found.
func (m *GetBrandBySlugResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandBySlugResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBrand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBrandBySlugResponseValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBrandBySlugResponseValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBrand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBrandBySlugResponseValidationError{
				field:  "Brand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBrandBySlugResponseMultiError(errors)
	}

	return nil
}

// GetBrandBySlugResponseMultiError is an error wrapping multiple validation
// errors returned by GetBrandBySlugResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBrandBySlugResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandBySlugResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandBySlugResponseMultiError) AllErrors() []error { return m }

// GetBrandBySlugResponseValidationError is the validation error returned by
// GetBrandBySlugResponse.Validate if the designated constraints aren't met.
type GetBrandBySlugResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandBySlugResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandBySlugResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandBySlugResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandBySlugResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandBySlugResponseValidationError) ErrorName() string {
	return "GetBrandBySlugResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBrandBySlugResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandBySlugResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandBySlugResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandBySlugResponseValidationError{}

// Validate checks the field values on GetAllBrandProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllBrandProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllBrandProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllBrandProductsRequestMultiError, or nil if none found.
func (m *GetAllBrandProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllBrandProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAllBrandProductsRequestMultiError(errors)
	}

	return nil
}

// GetAllBrandProductsRequestMultiError is an error wrapping multiple
// validation errors returned by GetAllBrandProductsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAllBrandProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllBrandProductsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllBrandProductsRequestMultiError) AllErrors() []error { return m }

// GetAllBrandProductsRequestValidationError is the validation error returned
// by GetAllBrandProductsRequest.Validate if the designated constraints aren't met.
type GetAllBrandProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllBrandProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllBrandProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllBrandProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllBrandProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllBrandProductsRequestValidationError) ErrorName() string {
	return "GetAllBrandProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllBrandProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllBrandProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllBrandProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllBrandProductsRequestValidationError{}

// Validate checks the field values on GetAllBrandProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllBrandProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllBrandProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllBrandProductsResponseMultiError, or nil if none found.
func (m *GetAllBrandProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllBrandProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllBrandProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllBrandProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllBrandProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllBrandProductsResponseMultiError(errors)
	}

	return nil
}

// GetAllBrandProductsResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllBrandProductsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAllBrandProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllBrandProductsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllBrandProductsResponseMultiError) AllErrors() []error { return m }

// GetAllBrandProductsResponseValidationError is the validation error returned
// by GetAllBrandProductsResponse.Validate if the designated constraints
// aren't met.
type GetAllBrandProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllBrandProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllBrandProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllBrandProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllBrandProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllBrandProductsResponseValidationError) ErrorName() string {
	return "GetAllBrandProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllBrandProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllBrandProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllBrandProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllBrandProductsResponseValidationError{}

// Validate checks the field values on DeleteBrandByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBrandByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBrandByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBrandByIdRequestMultiError, or nil if none found.
func (m *DeleteBrandByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBrandByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBrandByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteBrandByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBrandByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBrandByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBrandByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBrandByIdRequestMultiError) AllErrors() []error { return m }

// DeleteBrandByIdRequestValidationError is the validation error returned by
// DeleteBrandByIdRequest.Validate if the designated constraints aren't met.
type DeleteBrandByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandByIdRequestValidationError) ErrorName() string {
	return "DeleteBrandByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBrandByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandByIdRequestValidationError{}

// Validate checks the field values on DeleteBrandByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBrandByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBrandByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBrandByIdResponseMultiError, or nil if none found.
func (m *DeleteBrandByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBrandByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteBrandByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteBrandByIdResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteBrandByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBrandByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBrandByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBrandByIdResponseMultiError) AllErrors() []error { return m }

// DeleteBrandByIdResponseValidationError is the validation error returned by
// DeleteBrandByIdResponse.Validate if the designated constraints aren't met.
type DeleteBrandByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandByIdResponseValidationError) ErrorName() string {
	return "DeleteBrandByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBrandByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandByIdResponseValidationError{}

// Validate checks the field values on CategoryInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CategoryInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryInfoMultiError, or
// nil if none found.
func (m *CategoryInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	if len(errors) > 0 {
		return CategoryInfoMultiError(errors)
	}

	return nil
}

// CategoryInfoMultiError is an error wrapping multiple validation errors
// returned by CategoryInfo.ValidateAll() if the designated constraints aren't met.
type CategoryInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryInfoMultiError) AllErrors() []error { return m }

// CategoryInfoValidationError is the validation error returned by
// CategoryInfo.Validate if the designated constraints aren't met.
type CategoryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryInfoValidationError) ErrorName() string { return "CategoryInfoValidationError" }

// Error satisfies the builtin error interface
func (e CategoryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryInfoValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}

	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on Brand with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Brand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Brand with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BrandMultiError, or nil if none found.
func (m *Brand) ValidateAll() error {
	return m.validate(true)
}

func (m *Brand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrandValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrandValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrandValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BrandMultiError(errors)
	}

	return nil
}

// BrandMultiError is an error wrapping multiple validation errors returned by
// Brand.ValidateAll() if the designated constraints aren't met.
type BrandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrandMultiError) AllErrors() []error { return m }

// BrandValidationError is the validation error returned by Brand.Validate if
// the designated constraints aren't met.
type BrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandValidationError) ErrorName() string { return "BrandValidationError" }

// Error satisfies the builtin error interface
func (e BrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandValidationError{}
