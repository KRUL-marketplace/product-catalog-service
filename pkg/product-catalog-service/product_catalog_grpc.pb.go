// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: product_catalog.proto

package product_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductCatalogServiceClient is the client API for ProductCatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCatalogServiceClient interface {
	// Создание нового продукта
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	// Обновление существующего продукта
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	// Получение продукта по его идентификатору
	GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error)
	// Получение продукта по его slug
	GetProductBySlug(ctx context.Context, in *GetProductBySlugRequest, opts ...grpc.CallOption) (*GetProductBySlugResponse, error)
	// Получение списка всех продуктов
	GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
	// Получения товара определенного бренда
	GetAllBrandProducts(ctx context.Context, in *GetAllBrandProductsRequest, opts ...grpc.CallOption) (*GetAllBrandProductsResponse, error)
	// Удаление продукта по его идентификатору
	DeleteProductById(ctx context.Context, in *DeleteProductByIdRequest, opts ...grpc.CallOption) (*DeleteProductByIdResponse, error)
	// Создание новой категории
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	// Обновление существующей категории
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	// Получение списка всех категорий
	GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesResponse, error)
	// Получение категории по её идентификатору
	GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*GetCategoryByIdResponse, error)
	// Получение категории по её slug
	GetCategoryBySlug(ctx context.Context, in *GetCategoryBySlugRequest, opts ...grpc.CallOption) (*GetCategoryBySlugResponse, error)
	// Удаление категории по её идентификатору
	DeleteCategoryById(ctx context.Context, in *DeleteCategoryByIdRequest, opts ...grpc.CallOption) (*DeleteCategoryByIdResponse, error)
	// Создание нового бренда
	CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*CreateBrandResponse, error)
	// Обновление существующего бренда
	UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*UpdateBrandResponse, error)
	// Получение списка всех брендов
	GetAllBrands(ctx context.Context, in *GetAllBrandsRequest, opts ...grpc.CallOption) (*GetAllBrandsResponse, error)
	// Получение бренда по его идентификатору
	GetBrandById(ctx context.Context, in *GetBrandByIdRequest, opts ...grpc.CallOption) (*GetBrandByIdResponse, error)
	// Получение бренда по его slug
	GetBrandBySlug(ctx context.Context, in *GetBrandBySlugRequest, opts ...grpc.CallOption) (*GetBrandBySlugResponse, error)
	// Удаление бренда по его идентификатору
	DeleteBrandById(ctx context.Context, in *DeleteBrandByIdRequest, opts ...grpc.CallOption) (*DeleteBrandByIdResponse, error)
}

type productCatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCatalogServiceClient(cc grpc.ClientConnInterface) ProductCatalogServiceClient {
	return &productCatalogServiceClient{cc}
}

func (c *productCatalogServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error) {
	out := new(GetProductByIdResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/GetProductById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetProductBySlug(ctx context.Context, in *GetProductBySlugRequest, opts ...grpc.CallOption) (*GetProductBySlugResponse, error) {
	out := new(GetProductBySlugResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/GetProductBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	out := new(GetAllProductsResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/GetAllProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetAllBrandProducts(ctx context.Context, in *GetAllBrandProductsRequest, opts ...grpc.CallOption) (*GetAllBrandProductsResponse, error) {
	out := new(GetAllBrandProductsResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/GetAllBrandProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) DeleteProductById(ctx context.Context, in *DeleteProductByIdRequest, opts ...grpc.CallOption) (*DeleteProductByIdResponse, error) {
	out := new(DeleteProductByIdResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/DeleteProductById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesResponse, error) {
	out := new(GetAllCategoriesResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/GetAllCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*GetCategoryByIdResponse, error) {
	out := new(GetCategoryByIdResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/GetCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetCategoryBySlug(ctx context.Context, in *GetCategoryBySlugRequest, opts ...grpc.CallOption) (*GetCategoryBySlugResponse, error) {
	out := new(GetCategoryBySlugResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/GetCategoryBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) DeleteCategoryById(ctx context.Context, in *DeleteCategoryByIdRequest, opts ...grpc.CallOption) (*DeleteCategoryByIdResponse, error) {
	out := new(DeleteCategoryByIdResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/DeleteCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*CreateBrandResponse, error) {
	out := new(CreateBrandResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/CreateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*UpdateBrandResponse, error) {
	out := new(UpdateBrandResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetAllBrands(ctx context.Context, in *GetAllBrandsRequest, opts ...grpc.CallOption) (*GetAllBrandsResponse, error) {
	out := new(GetAllBrandsResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/GetAllBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetBrandById(ctx context.Context, in *GetBrandByIdRequest, opts ...grpc.CallOption) (*GetBrandByIdResponse, error) {
	out := new(GetBrandByIdResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/GetBrandById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetBrandBySlug(ctx context.Context, in *GetBrandBySlugRequest, opts ...grpc.CallOption) (*GetBrandBySlugResponse, error) {
	out := new(GetBrandBySlugResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/GetBrandBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) DeleteBrandById(ctx context.Context, in *DeleteBrandByIdRequest, opts ...grpc.CallOption) (*DeleteBrandByIdResponse, error) {
	out := new(DeleteBrandByIdResponse)
	err := c.cc.Invoke(ctx, "/product.ProductCatalogService/DeleteBrandById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCatalogServiceServer is the server API for ProductCatalogService service.
// All implementations must embed UnimplementedProductCatalogServiceServer
// for forward compatibility
type ProductCatalogServiceServer interface {
	// Создание нового продукта
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	// Обновление существующего продукта
	UpdateProduct(context.Context, *UpdateProductRequest) (*CreateProductResponse, error)
	// Получение продукта по его идентификатору
	GetProductById(context.Context, *GetProductByIdRequest) (*GetProductByIdResponse, error)
	// Получение продукта по его slug
	GetProductBySlug(context.Context, *GetProductBySlugRequest) (*GetProductBySlugResponse, error)
	// Получение списка всех продуктов
	GetAllProducts(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error)
	// Получения товара определенного бренда
	GetAllBrandProducts(context.Context, *GetAllBrandProductsRequest) (*GetAllBrandProductsResponse, error)
	// Удаление продукта по его идентификатору
	DeleteProductById(context.Context, *DeleteProductByIdRequest) (*DeleteProductByIdResponse, error)
	// Создание новой категории
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	// Обновление существующей категории
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	// Получение списка всех категорий
	GetAllCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesResponse, error)
	// Получение категории по её идентификатору
	GetCategoryById(context.Context, *GetCategoryByIdRequest) (*GetCategoryByIdResponse, error)
	// Получение категории по её slug
	GetCategoryBySlug(context.Context, *GetCategoryBySlugRequest) (*GetCategoryBySlugResponse, error)
	// Удаление категории по её идентификатору
	DeleteCategoryById(context.Context, *DeleteCategoryByIdRequest) (*DeleteCategoryByIdResponse, error)
	// Создание нового бренда
	CreateBrand(context.Context, *CreateBrandRequest) (*CreateBrandResponse, error)
	// Обновление существующего бренда
	UpdateBrand(context.Context, *UpdateBrandRequest) (*UpdateBrandResponse, error)
	// Получение списка всех брендов
	GetAllBrands(context.Context, *GetAllBrandsRequest) (*GetAllBrandsResponse, error)
	// Получение бренда по его идентификатору
	GetBrandById(context.Context, *GetBrandByIdRequest) (*GetBrandByIdResponse, error)
	// Получение бренда по его slug
	GetBrandBySlug(context.Context, *GetBrandBySlugRequest) (*GetBrandBySlugResponse, error)
	// Удаление бренда по его идентификатору
	DeleteBrandById(context.Context, *DeleteBrandByIdRequest) (*DeleteBrandByIdResponse, error)
	mustEmbedUnimplementedProductCatalogServiceServer()
}

// UnimplementedProductCatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCatalogServiceServer struct {
}

func (UnimplementedProductCatalogServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductCatalogServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetProductById(context.Context, *GetProductByIdRequest) (*GetProductByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetProductBySlug(context.Context, *GetProductBySlugRequest) (*GetProductBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductBySlug not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetAllProducts(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetAllBrandProducts(context.Context, *GetAllBrandProductsRequest) (*GetAllBrandProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBrandProducts not implemented")
}
func (UnimplementedProductCatalogServiceServer) DeleteProductById(context.Context, *DeleteProductByIdRequest) (*DeleteProductByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductById not implemented")
}
func (UnimplementedProductCatalogServiceServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedProductCatalogServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetAllCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetCategoryById(context.Context, *GetCategoryByIdRequest) (*GetCategoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetCategoryBySlug(context.Context, *GetCategoryBySlugRequest) (*GetCategoryBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryBySlug not implemented")
}
func (UnimplementedProductCatalogServiceServer) DeleteCategoryById(context.Context, *DeleteCategoryByIdRequest) (*DeleteCategoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryById not implemented")
}
func (UnimplementedProductCatalogServiceServer) CreateBrand(context.Context, *CreateBrandRequest) (*CreateBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedProductCatalogServiceServer) UpdateBrand(context.Context, *UpdateBrandRequest) (*UpdateBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetAllBrands(context.Context, *GetAllBrandsRequest) (*GetAllBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBrands not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetBrandById(context.Context, *GetBrandByIdRequest) (*GetBrandByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandById not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetBrandBySlug(context.Context, *GetBrandBySlugRequest) (*GetBrandBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandBySlug not implemented")
}
func (UnimplementedProductCatalogServiceServer) DeleteBrandById(context.Context, *DeleteBrandByIdRequest) (*DeleteBrandByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrandById not implemented")
}
func (UnimplementedProductCatalogServiceServer) mustEmbedUnimplementedProductCatalogServiceServer() {}

// UnsafeProductCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCatalogServiceServer will
// result in compilation errors.
type UnsafeProductCatalogServiceServer interface {
	mustEmbedUnimplementedProductCatalogServiceServer()
}

func RegisterProductCatalogServiceServer(s grpc.ServiceRegistrar, srv ProductCatalogServiceServer) {
	s.RegisterService(&ProductCatalogService_ServiceDesc, srv)
}

func _ProductCatalogService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/GetProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetProductById(ctx, req.(*GetProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetProductBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetProductBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/GetProductBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetProductBySlug(ctx, req.(*GetProductBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/GetAllProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetAllProducts(ctx, req.(*GetAllProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetAllBrandProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBrandProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetAllBrandProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/GetAllBrandProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetAllBrandProducts(ctx, req.(*GetAllBrandProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_DeleteProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).DeleteProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/DeleteProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).DeleteProductById(ctx, req.(*DeleteProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetAllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetAllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/GetAllCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetAllCategories(ctx, req.(*GetAllCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/GetCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetCategoryById(ctx, req.(*GetCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetCategoryBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetCategoryBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/GetCategoryBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetCategoryBySlug(ctx, req.(*GetCategoryBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_DeleteCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).DeleteCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/DeleteCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).DeleteCategoryById(ctx, req.(*DeleteCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/CreateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).CreateBrand(ctx, req.(*CreateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).UpdateBrand(ctx, req.(*UpdateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetAllBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetAllBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/GetAllBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetAllBrands(ctx, req.(*GetAllBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetBrandById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetBrandById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/GetBrandById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetBrandById(ctx, req.(*GetBrandByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetBrandBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetBrandBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/GetBrandBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetBrandBySlug(ctx, req.(*GetBrandBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_DeleteBrandById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).DeleteBrandById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCatalogService/DeleteBrandById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).DeleteBrandById(ctx, req.(*DeleteBrandByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCatalogService_ServiceDesc is the grpc.ServiceDesc for ProductCatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductCatalogService",
	HandlerType: (*ProductCatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductCatalogService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductCatalogService_UpdateProduct_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _ProductCatalogService_GetProductById_Handler,
		},
		{
			MethodName: "GetProductBySlug",
			Handler:    _ProductCatalogService_GetProductBySlug_Handler,
		},
		{
			MethodName: "GetAllProducts",
			Handler:    _ProductCatalogService_GetAllProducts_Handler,
		},
		{
			MethodName: "GetAllBrandProducts",
			Handler:    _ProductCatalogService_GetAllBrandProducts_Handler,
		},
		{
			MethodName: "DeleteProductById",
			Handler:    _ProductCatalogService_DeleteProductById_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _ProductCatalogService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ProductCatalogService_UpdateCategory_Handler,
		},
		{
			MethodName: "GetAllCategories",
			Handler:    _ProductCatalogService_GetAllCategories_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _ProductCatalogService_GetCategoryById_Handler,
		},
		{
			MethodName: "GetCategoryBySlug",
			Handler:    _ProductCatalogService_GetCategoryBySlug_Handler,
		},
		{
			MethodName: "DeleteCategoryById",
			Handler:    _ProductCatalogService_DeleteCategoryById_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _ProductCatalogService_CreateBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _ProductCatalogService_UpdateBrand_Handler,
		},
		{
			MethodName: "GetAllBrands",
			Handler:    _ProductCatalogService_GetAllBrands_Handler,
		},
		{
			MethodName: "GetBrandById",
			Handler:    _ProductCatalogService_GetBrandById_Handler,
		},
		{
			MethodName: "GetBrandBySlug",
			Handler:    _ProductCatalogService_GetBrandBySlug_Handler,
		},
		{
			MethodName: "DeleteBrandById",
			Handler:    _ProductCatalogService_DeleteBrandById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_catalog.proto",
}
